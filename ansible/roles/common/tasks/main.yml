---
- name: Install Aptitude Package Manager
  apt:
    name: aptitude
    update_cache: yes
    state: latest
    force_apt_get: yes
  tags: req_aptitude

# Sudo Group Setup
- name: Make sure we have a 'wheel' group
  group:
    name: wheel
    state: present
  tags: secure_access

- name: Allow 'wheel' group to have passwordless sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: "^%wheel"
    line: "%wheel ALL=(ALL) NOPASSWD: ALL"
    validate: "/usr/sbin/visudo -cf %s"
  tags: secure_access

# User + Key Setup
- name: Create a new regular user with sudo privileges
  user:
    name: "{{ create_user }}"
    state: present
    groups:
      - wheel
    append: true
    create_home: true
    shell: /bin/bash
  tags: secure_access

- name: Set authorized key for remote user
  authorized_key:
    user: "{{ create_user }}"
    state: present
    key: "{{ copy_local_key }}"
  tags: secure_access

- name: Disable password authentication for root
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: "^#?PermitRootLogin"
    line: "PermitRootLogin prohibit-password"
  tags: secure_access

# Install Packages
- name: Update apt
  apt:
    update_cache: yes
  tags: sw_update

- name: Install required system packages
  apt:
    name: "{{ sys_packages }}"
    state: latest
  tags: sw_update

# UFW Setup
- name: UFW - Allow SSH connections
  ufw:
    rule: allow
    name: OpenSSH
  tags: firewall

- name: UFW - Deny all other incoming traffic by default
  ufw:
    state: enabled
    policy: deny
    direction: incoming
  tags: firewall

# set hostname
- name: set hostname
  hostname:
    name: '{{ inventory_hostname }}'
  tags: host_identity

# hosts file - from comments in https://gist.github.com/rothgar/8793800
- name: "generate /etc/hosts.ansible file"
  template: 
    src: etc/hosts.j2
    dest: /etc/hosts.ansible
    owner: root
    group: root
    mode: '0644'
  tags: etc_hosts

- name: "check if debian generated hosts file has a backup"
  stat: 
    path: /etc/hosts.orig
  register: etc_hosts_orig
  tags: etc_hosts

- name: "backup debian generated /etc/hosts"
  command: "cp /etc/hosts /etc/hosts.orig"
  when: etc_hosts_orig.stat.islnk is not defined
  become: true
  tags: etc_hosts

- name: "install /etc/hosts.ansible file"
  command: "cp /etc/hosts.ansible /etc/hosts"
  tags: etc_hosts

# docker container runtime
- name: "enable apt software install over https"
  apt: 
    pkg: 
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common
    - gnupg2
    state: latest 
    update_cache: yes
  tags: docker

- name: Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  tags: docker

- name: Add Docker Repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present
  tags: docker

- name: Update apt and install docker-ce
  apt: 
    pkg: 
    - docker-ce
    - docker-ce-cli
    - containerd.io
    update_cache: yes  
    state: latest
  tags: docker

- name: "Setup docker daemon file"
  copy: 
    src: etc/docker/daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'
  tags: docker

- name: Create systemd directory for docker
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: '0755'  
  tags: docker

- name: Restart service docker, also issue daemon-reload to pick up config changes
  systemd:
    state: restarted
    daemon_reload: yes
    name: docker
  tags: docker

- name: Enable docker service
  systemd:
    name: docker
    enabled: yes
  tags: docker

# Firewall rules for k8s
- name: UFW - Kubernetes API Server
  ufw:
    rule: allow
    direction: in
    proto: tcp
    from_port: '6443' 
  tags: k8sfw

- name: UFW - etcd server client API
  ufw:
    rule: allow
    direction: in
    proto: tcp
    from_port: '2379:2380' 
  tags: k8sfw

- name: UFW - Kubelet API
  ufw:
    rule: allow
    direction: in
    proto: tcp
    from_port: '10250' 
  tags: k8sfw

- name: UFW - Kube scheduler
  ufw:
    rule: allow
    direction: in
    proto: tcp
    from_port: '10251' 
  tags: k8sfw

- name: UFW - kube-controller-manager
  ufw:
    rule: allow
    direction: in
    proto: tcp
    from_port: '10251' 
  tags: k8sfw

- name: UFW - NodePort Services
  ufw:
    rule: allow
    direction: in
    proto: tcp
    from_port: '30000:32767' 
  tags: k8sfw

# Set ip forwarding on in /proc and in the sysctl file and reload if necessary
- name: Enable IPv4 Forwarding 
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  tags: ipfwd

# k8s doesn't want swap enabled
- name: Disable swapoff
  shell: swapoff -a
  tags: swapoff

- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
  tags: swapoff

# k8s needs br_netfilter kernel module
# The odroid c2 ubuntu kernel is 3.16 so is built in
# - name: Load br_netfilter kernel mod
#   modprobe: 
#     name: br_netfilter
#     state: present
#   tags: kmods

# also seems that the sysctl variables are already set so no need for script

# Install k8s software
- name: Add kubernetes repo GPG apt Key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  tags: installk8s

- name: Add kubernetes Repository
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
  tags: installk8s

- name: Update apt and install kubernetes packages
  apt: 
    pkg: 
    - kubelet
    - kubeadm
    - kubectl
    update_cache: yes  
    state: latest
  tags: installk8s